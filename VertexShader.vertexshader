#version 330

// Input from model:
in vec4 vertexPos_modelspace;
in vec2 textureCoords;
in vec3 vertexNormal_modelspace;

// Camera inputs
uniform float cotFOVy;
uniform float far;
uniform float near;
uniform float aspect;
uniform float cameraX;
uniform float cameraY;
uniform float cameraZ;
uniform float azimuth;
uniform float altitude;
uniform vec3 objColorIn;

// Modelview matrix
uniform mat4 modelViewMatrix;

// Output to fragment shader: Interpolated texture coordinates
out vec2 currTextureCoords;
out vec3 vertexPosition;
out vec3 vertexNormal;
out vec3 objColor;

void main()
{
    // Projection Matrix
    mat4 projectionMatrix = mat4(cotFOVy/aspect, 0.0, 0.0, 0.0,
                                 0.0, cotFOVy, 0.0, 0.0,
                                 0.0, 0.0, -(far+near)/(far - near), -(2*far*near)/(far-near),
                                 0.0, 0.0, -1.0, 0.0);

    // governs how to move objects BEFORE rotation
    mat4 cameraMatrix = mat4(1.0, 0.0, 0.0, 0.0,
                             0.0, 1.0, 0.0, 0.0,
                             0.0, 0.0, 1.0, 0.0,
                             cameraX, cameraY, cameraZ, 1.0);

    // governs how to rotate objects LATERALLY
    mat4 cameraAzimuthRotate = mat4(
        cos(azimuth), 0.0, sin(azimuth), 0.0,
        0.0, 1.0, 0.0, 0.0,
        -sin(azimuth), 0.0, cos(azimuth), 0.0,
        0, 0, 0, 1.0 );

    // governs how to rotate objects horizontally. Applied last of camera matrices
    mat4 altitudeRotationMatrix = mat4(1, 0, 0, 0,
                                0, cos(altitude), -sin(altitude), 0,
                                0, sin(altitude), cos(altitude), 0,
                                0, 0, 0, 1);

    // Transform vertex
    gl_Position = projectionMatrix*altitudeRotationMatrix*cameraAzimuthRotate*cameraMatrix*modelViewMatrix*vec4(vertexPos_modelspace);
    // Pass through texture coordinates
    //currTextureCoords = textureCoords;

    vertexPosition = (modelViewMatrix*vertexPos_modelspace).xyz;
    vertexNormal = (modelViewMatrix*vec4(vertexNormal_modelspace.x,vertexNormal_modelspace.y,vertexNormal_modelspace.z,0.0)).xyz;
    //vertexNormal = (modelViewMatrix*vec4(vertexNormal_modelspace.x,vertexNormal_modelspace.y,vertexNormal_modelspace.z,1.0)).xyz;

    objColor = objColorIn;
}
